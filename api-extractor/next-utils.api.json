{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.22.2",
    "schemaVersion": 1005,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@asl-19/next-utils!",
  "docComment": "/**\n * Shared Next.js utility functions for ASL19 projects.\n *\n * @packageDocumentation\n */\n",
  "name": "@asl-19/next-utils",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@asl-19/next-utils!",
      "name": "",
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/next-utils!AslLink:var",
          "docComment": "/**\n * Same as {@link https://nextjs.org/docs/api-reference/next/link | next/link}, but with passHref prop pre-set.\n *\n * @remarks\n *\n * The passHref prop needs to be set for any Next.js Link wrapping an element with the Emotion css prop (because it turns the styled element into custom component). This is an unintuitive restriction that’s likely to cause unexpected mistakes/regressions, so it’s safest to always use AslLink over Link.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AslLink: "
            },
            {
              "kind": "Reference",
              "text": "FC",
              "canonicalReference": "@types/react!~React.FC:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "LinkProps",
              "canonicalReference": "next!LinkProps:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    children: "
            },
            {
              "kind": "Reference",
              "text": "ReactNode",
              "canonicalReference": "@types/react!~React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n}>"
            }
          ],
          "releaseTag": "Public",
          "name": "AslLink",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/next-utils!getNextJsHeaders:var",
          "docComment": "/**\n * Get Next.js headers array from object containing header values by name.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getNextJsHeaders: "
            },
            {
              "kind": "Content",
              "text": "(headers: {\n    [headerName: string]: string;\n}) => {\n    key: string;\n    value: string;\n}[]"
            }
          ],
          "releaseTag": "Public",
          "name": "getNextJsHeaders",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/next-utils!loadEnvFileIntoProcessEnv:var",
          "docComment": "/**\n * Load .env.* into process.env using Next.js’ loadEnvConfig.\n *\n * @remarks\n *\n * For dev/build/start loads .env.local; for tests loads .env.test.\n *\n * See https://nextjs.org/docs/basic-features/environment-variables\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "loadEnvFileIntoProcessEnv: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            }
          ],
          "releaseTag": "Public",
          "name": "loadEnvFileIntoProcessEnv",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
